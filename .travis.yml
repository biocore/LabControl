dist: trusty
language: python
# for installing libevent-dev
sudo: required
# if latest trusty build has spurious build fails, you can revert to previous
# version.
group: deprecated-2017Q4
env:
  global:
    - PYTHON_VERSION=3.6
before_install:
  # Install libevent-dev (not installed by default in Trusty)
  - sudo apt-get install libevent-dev
  # Start Redis Server
  - redis-server --port 7777 &
  # Install and configure Miniconda
  - wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
  - chmod +x miniconda.sh
  - ./miniconda.sh -b
  - rm miniconda.sh
  - export PATH=/home/travis/miniconda3/bin:$PATH
  # Update Conda itself
  - conda update --yes conda
  # Configure Postgres for testing:
  #   Hard limit for transaction log, to prevent VHD from filling during tests
  - psql -c "ALTER SYSTEM SET max_wal_size=2"
  - psql -c "ALTER SYSTEM SET wal_keep_segments=0"
  - psql -c "SELECT pg_reload_conf()"
install:
  # Install Qiita first since it is needed for the environment and the tests
  #   Create Conda environment for Qiita and install dependencies
  - travis_retry conda create -q --yes -n qiita python=$PYTHON_VERSION pip libgfortran numpy
  - source activate qiita
  - 'echo "backend: Agg" > matplotlibrc'
  - pip install sphinx sphinx-bootstrap-theme nose-timer codecov Click
  #   Install webdis
  - git clone https://github.com/nicolasff/webdis
  - pushd webdis
  - make
  - ./webdis &
  - popd
  #   Install Qiita (Development Branch) into current (qiita) environment.
  - pip install https://github.com/biocore/qiita/archive/dev.zip
  # Create the Qiita environment
  - qiita-env make --no-load-ontologies
  # Start the qiita server in the backend
  - qiita pet webserver --no-build-docs start >o 2>e &
  - cat o
  - cat e
  # Deactivate the Qiita environment
  - source deactivate
  # Install Labcontrol
  #   Set Qiita Client Library's Debug level
  - export QIITA_CLIENT_DEBUG_LEVEL=DEBUG
  #   Set location of Qiita's server certificate
  #   TODO: Needed?
  - export QIITA_SERVER_CERT=$HOME/miniconda3/envs/qiita/lib/python$PYTHON_VERSION/site-packages/qiita_core/support_files/server.crt
  #   Verify server.crt exists in the expected location
  - ls -la $QIITA_SERVER_CERT
  #   Configure Labcontrol configuration file before installation
  - sed "s#CERTIFICATE_FILEPATH=#CERTIFICATE_FILEPATH=$PWD/support_files/server.crt#g" labman/db/support_files/test_config.cfg > ~/.labman.cfg.1
  - sed "s#SERVER_CERT=.*#SERVER_CERT=$QIITA_SERVER_CERT#g" ~/.labman.cfg.1 > ~/.labman.cfg.2
  - sed "s#KEY_FILEPATH=#KEY_FILEPATH=$PWD/support_files/server.key#g" ~/.labman.cfg.2 > ~/.labman.cfg
    #- rm ~/.labman.cfg.1 ~/.labman.cfg.2
  - echo "STEP 1"  
  - cat ~/.labman.cfg.1
  - echo "STEP 2"  
  - cat ~/.labman.cfg.2
  - echo "STEP 3"  
  - cat ~/.labman.cfg
  #   Create 'labcontrol' Conda environment
  - travis_retry conda create --yes -n labcontrol python=$PYTHON_VERSION pip nose flake8 mock
  - source activate labcontrol
  - pip install -U pip
  - pip install sphinx sphinx-bootstrap-theme coveralls
  #   Labcontrol also requires qiita_client library to fully interface w/Qiita
  - pip install https://github.com/qiita-spots/qiita_client/archive/master.zip
  - travis_retry pip install .
  - mkdir -p support_files
  - openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout support_files/server.key -out support_files/server.crt -subj "/C=US/ST=CA/L=LaJolla/O=/CN=localhost"
  # Apply the Labcontrol patches to the database
  - psql -d qiita_test -f labman/db/support_files/db_patch.sql
  - psql -d qiita_test -f labman/db/support_files/db_patch_manual.sql
script:
  - nosetests -x --with-doctest --with-coverage -v --cover-package=labman
  - flake8 labman setup.py scripts/*
    #  - labman/db/tests/tester.py integration_tests
    #  - labman/db/tests/tester.py stress_tests --num_plates 2
  - labman start_webserver &
  - LABMAN_PID=$!
  - sleep 10
  - kill $LABMAN_PID
addons:
  postgresql: "9.5"
services:
  - redis-server
  - postgresql
after_success:
  - coveralls
