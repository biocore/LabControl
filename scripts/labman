#!/usr/bin/env python

# ----------------------------------------------------------------------------
# Copyright (c) 2017-, labman development team.
#
# Distributed under the terms of the Modified BSD License.
#
# The full license is in the file LICENSE, distributed with this software.
# ----------------------------------------------------------------------------

import click


@click.group()
def labman():
    pass


@labman.command()
@click.option('--port', required=False, type=int,
              help="Port where the webserver will start", default=8080)
def start_webserver(port):
    """Starts the labman webserver"""
    import socket
    import errno
    from os.path import join

    from tornado.httpserver import HTTPServer
    from tornado.ioloop import IOLoop
    from tornado.options import options, parse_command_line

    from labman.gui.webserver import Application
    from labman.db.settings import labman_settings

    # Set up logs
    options.log_file_prefix = join(labman_settings.log_dir,
                                   'labman_%d.log' % port)
    options.logging = 'debug'
    parse_command_line()

    # Create the webserver
    http_server = HTTPServer(Application())
    try:
        http_server.listen(port)
    except socket.error as e:
        if e.errno == errno.EADDRINUSE:
            raise RuntimeError(
                "Port %d is already in use. Please choose another "
                "port with --port" % port)
        else:
            raise

    click.echo("Labman started on port %d" % port)
    ioloop = IOLoop.instance()

    ioloop.start()


@labman.command()
def config():
    """Generate labman configuration file"""
    from os.path import expanduser

    from labman.db.configuration_manager import ConfigurationManager

    config_fp = expanduser(click.prompt('Path to the configuration file',
                                        default='~/.labman.cfg'))

    click.echo('Main configuration:')
    test_env = click.prompt('Test environment', default=True)
    log_dir = click.prompt('Log directory', default="/tmp/")

    click.echo('Postgres configuration:')
    db_host = click.prompt('Postgres host', default='localhost')
    db_port = click.prompt('Postgres port', default=5432)
    db_name = click.prompt('Database name', default='qiita')
    db_user = click.prompt('Postgres user', default='labman')
    db_password = click.prompt('Postgres user password', hide_input=True,
                               confirmation_prompt=True, default="")
    db_admin_user = click.prompt('Postgres admin user', default='labman')
    db_admin_password = click.prompt(
        'Postgres admin user password', hide_input=True,
        confirmation_prompt=True, default="")

    click.echo('Qiita configuration (for testing purposes):')
    qiita_server_cert = click.prompt('Qiita server certificate', default="")
    client_id = click.prompt(
        'Client id',
        default='19ndkO3oMKsoChjVVWluF7QkxHRfYhTKSFbAVt8IhK7gZgDaO4')
    client_secret = click.prompt(
        'Client secret',
        'J7FfQ7CQdOxuKhQAf1eoGgBAE81Ns8Gu3EKaWFm3IO2JKhAmmCWZuabe0O5Mp28s1')
    valid_groups = click.prompt('Qiita user groups having labman access',
                                'admin,knightlab')

    ConfigurationManager.create(config_fp, test_env, db_host, db_port, db_name,
                                db_user, db_password, db_admin_user,
                                db_admin_password, log_dir, qiita_server_cert,
                                client_id, client_secret, valid_groups)


if __name__ == '__main__':
    labman()
